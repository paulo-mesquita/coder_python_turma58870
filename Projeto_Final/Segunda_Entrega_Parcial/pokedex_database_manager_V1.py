import sys
import requests
from plyer import notification
import random
import pygame
import os
import logging
import sqlite3

# Constantes
URL_BASE_POKEMON = 'https://pokeapi.co/api/v2/pokemon/'
POKEMONS_ALEATORIOS = [
    'pikachu', 'bulbasaur', 'ivysaur', 'venusaur', 'charmander', 
    'charmeleon', 'charizard', 'squirtle', 'wartortle', 'blastoise', 
    'caterpie', 'metapod', 'butterfree', 'weedle', 'kakuna', 'beedrill', 
    'pidgey', 'pidgeotto', 'pidgeot', 'rattata', 'raticate'
]

# Dicion√°rio de emojis correspondentes aos Pok√©mon
EMOJIS_POKEMON = {
    'pikachu': '‚ö°Ô∏è',
    'bulbasaur': 'üåø',
    'ivysaur': 'üåø',
    'venusaur': 'üåø',
    'charmander': 'üî•',
    'charmeleon': 'üî•',
    'charizard': 'üî•',
    'squirtle': 'üíß',
    'wartortle': 'üíß',
    'blastoise': 'üíß',
    'caterpie': 'üêõ',
    'metapod': 'üêõ',
    'butterfree': 'ü¶ã',
    'weedle': 'üêõ',
    'kakuna': 'üêõ',
    'beedrill': 'üêù',
    'pidgey': 'üê¶',
    'pidgeotto': 'üê¶',
    'pidgeot': 'ü¶Ö',
    'rattata': 'üê≠',
    'raticate': 'üê≠'
}

# Dicion√°rio de tradu√ß√£o de habilidades
traducao_habilidades = {
    'overgrow': 'Espessura',
    'chlorophyll': 'Clorofila',
    'blaze': 'Chama',
    'solar-power': 'Poder Solar',
    'torrent': 'Torrente',
    'rain-dish': 'Cura pela Chuva',
    'shield-dust': 'Poeira de Escudo',
    'run-away': 'Fuga',
    'tinted-lens': 'Lente Colorida',
    'swarm': 'Enxame',
    'sniper': 'Francoatirador',
    'keen-eye': 'Olhos Afiados',
    'tangled-feet': 'P√©s Confusos',
    'big-pecks': 'Peito Inchado',
    'guts': 'Guts',
    'hustle': 'Hustle',
    'static': 'Est√°tica',
    'lightning-rod': 'Para-Raios',
    'intimidate': 'Intimida√ß√£o',
    'rattled': 'Amedrontado'
}

# Dicion√°rio de tradu√ß√£o de tipos
traducao_tipos = {
    'normal': 'Normal',
    'fire': 'Fogo',
    'water': '√Ågua',
    'electric': 'El√©trico',
    'grass': 'Grama',
    'ice': 'Gelo',
    'fighting': 'Lutador',
    'poison': 'Veneno',
    'ground': 'Terra',
    'flying': 'Voador',
    'psychic': 'Ps√≠quico',
    'bug': 'Inseto',
    'rock': 'Pedra',
    'ghost': 'Fantasma',
    'dragon': 'Drag√£o',
    'dark': 'Sombrio',
    'steel': 'A√ßo',
    'fairy': 'Fada'
}

# Dicion√°rio de tradu√ß√£o de atributos
traducao_atributos = {
    'hp': 'HP',
    'attack': 'Ataque',
    'defense': 'Defesa',
    'speed': 'Velocidade'
}

# Configura√ß√£o do logger
def configurar_logger():
    log = logging.getLogger('projeto_final')
    log.setLevel(logging.DEBUG)

    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')

    # Logger para registrar em arquivo log.txt
    file_handler = logging.FileHandler('log.txt')
    file_handler.setLevel(logging.DEBUG)
    file_handler.setFormatter(formatter)
    log.addHandler(file_handler)

    # Logger para registrar na sa√≠da padr√£o
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(formatter)
    log.addHandler(console_handler)

    return log

# Fun√ß√£o para formatar a mensagem de notifica√ß√£o
def formatar_mensagem_notificacao(mensagem, tipo='info'):
    niveis = {'info': 1, 'erro': 3}
    nivel = niveis.get(tipo, 1)

    if tipo == 'info':
        titulo = f"üîî Alerta! N√≠vel {nivel} - Status da sua Pok√©Dex!"
    else:
        titulo = f"üîî Alerta! N√≠vel {nivel} - ‚ö†Ô∏è Erro na sua Pok√©Dex!"

    return titulo, mensagem

# Fun√ß√£o para exibir notifica√ß√£o e som da Pok√©dex
def alerta(mensagem, tipo='info'):
    titulo, mensagem_notificacao = formatar_mensagem_notificacao(mensagem, tipo)
    pygame.mixer.init()

    som_path = os.path.join(os.getcwd(), './audio/quem_e_esse_pokemon.mp3')
    if not os.path.exists(som_path):
        som_path = None

    if som_path:
        pygame.mixer.music.load(som_path)
        pygame.mixer.music.play()
    else:
        pass

    notification.notify(
        title=titulo,
        message=mensagem_notificacao,
        app_name='Notifica√ß√£o - Pok√©API',
        timeout=10
    )

# Fun√ß√£o para criar o banco de dados SQLite e tabela se n√£o existirem
def criar_bd():
    try:
        conexao = sqlite3.connect('pokedex.db')
        cursor = conexao.cursor()

        # Criar tabela se n√£o existir
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS pokemon (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                nome TEXT NOT NULL UNIQUE,
                altura REAL,
                peso REAL,
                hp INTEGER,
                attack INTEGER,
                defense INTEGER,
                speed INTEGER,
                habilidades TEXT,
                tipos TEXT
            )
        ''')
        conexao.commit()
        return conexao, cursor
    except sqlite3.Error as error:
        print("Erro ao criar o banco de dados:", error)
        return None, None

# Fun√ß√£o para consultar dados do banco de dados
def consultar_bd(cursor, nome_pokemon):
    try:
        cursor.execute('SELECT * FROM pokemon WHERE nome=?', (nome_pokemon,))
        return cursor.fetchone()
    except sqlite3.Error as error:
        print("Erro ao consultar o banco de dados:", error)
        return None

# Fun√ß√£o para inserir dados no banco de dados
def inserir_dados(conexao, cursor, pokemon):
    try:
        # Preparar dados para inser√ß√£o
        altura = pokemon['height'] / 10
        peso = pokemon['weight'] / 10
        hp = next((stat['base_stat'] for stat in pokemon['stats'] if stat['stat']['name'] == 'hp'), 0)
        attack = next((stat['base_stat'] for stat in pokemon['stats'] if stat['stat']['name'] == 'attack'), 0)
        defense = next((stat['base_stat'] for stat in pokemon['stats'] if stat['stat']['name'] == 'defense'), 0)
        speed = next((stat['base_stat'] for stat in pokemon['stats'] if stat['stat']['name'] == 'speed'), 0)
        habilidades = ', '.join(traduzir_habilidades(pokemon['abilities']))
        tipos = ', '.join(traduzir_tipos(pokemon['types']))

        # Inserir dados no banco de dados
        cursor.execute('''
            INSERT INTO pokemon (nome, altura, peso, hp, attack, defense, speed, habilidades, tipos)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (pokemon['name'], altura, peso, hp, attack, defense, speed, habilidades, tipos))

        conexao.commit()
    except sqlite3.Error as error:
        print("Erro ao inserir dados:", error)

# Fun√ß√£o para obter dados da Pok√©API
def obter_dados_pokemon(nome_pokemon):
    try:
        resposta = requests.get(URL_BASE_POKEMON + nome_pokemon)
        if resposta.status_code == 200:
            return resposta.json()
        else:
            print(f'N√£o foi poss√≠vel encontrar o Pok√©mon {nome_pokemon} na Pok√©API (C√≥digo do erro: {resposta.status_code}). Tente novamente!')
            return None
    except requests.RequestException as e:
        print(f'Ocorreu um erro ao acessar a Pok√©API ({e}). Verifique sua conex√£o e tente novamente!')
        return None

# Fun√ß√£o para traduzir habilidades
def traduzir_habilidades(habilidades):
    habilidades_traduzidas = []
    for habilidade in habilidades:
        nome_habilidade = habilidade['ability']['name']
        habilidade_traduzida = traducao_habilidades.get(nome_habilidade, nome_habilidade)
        habilidades_traduzidas.append(habilidade_traduzida)
    return habilidades_traduzidas

# Fun√ß√£o para traduzir tipos
def traduzir_tipos(tipos):
    tipos_traduzidos = []
    for tipo in tipos:
        nome_tipo = tipo['type']['name']
        tipo_traduzido = traducao_tipos.get(nome_tipo, nome_tipo)
        tipos_traduzidos.append(tipo_traduzido)
    return tipos_traduzidos

# Fun√ß√£o para traduzir atributos
def traduzir_atributos(atributos):
    atributos_traduzidos = []
    for atributo in atributos:
        nome_atributo = atributo['stat']['name']
        if nome_atributo in traducao_atributos:
            atributo_traduzido = f"{traducao_atributos[nome_atributo]}: {atributo['base_stat']}"
            atributos_traduzidos.append(atributo_traduzido)
    return atributos_traduzidos

# Fun√ß√£o principal
def main():
    log = configurar_logger()

    try:
        conexao, cursor = criar_bd()
        if not conexao or not cursor:
            log.error("N√£o foi poss√≠vel conectar ao banco de dados.")
            return

        nome_pokemon = input("Digite o nome do Pok√©mon ou pressione Enter para um aleat√≥rio: ").strip().lower()
        if not nome_pokemon:
            nome_pokemon = random.choice(POKEMONS_ALEATORIOS)

        log.info(f"Consultando dados do Pok√©mon: {nome_pokemon}")

        # Consultar banco de dados
        pokemon_bd = consultar_bd(cursor, nome_pokemon)

        if pokemon_bd:
            log.info(f"Dados do Pok√©mon {nome_pokemon} encontrados no banco de dados.")
            altura, peso, hp, attack, defense, speed, habilidades, tipos = pokemon_bd[2:]

            mensagem_final = f"{EMOJIS_POKEMON.get(nome_pokemon, '')} {nome_pokemon.capitalize()} - Altura: {altura:.2f}m, Peso: {peso:.2f}kg | Atributos: HP: {hp}, Ataque: {attack}, Defesa: {defense}, Velocidade: {speed} | Habilidades: {habilidades}, Tipos: {tipos}"
            alerta(mensagem_final, 'info')

        else:
            log.info(f"Dados do Pok√©mon {nome_pokemon} n√£o encontrados no banco de dados. Consultando API...")

            # Consultar API
            dados_pokemon = obter_dados_pokemon(nome_pokemon)

            if dados_pokemon:
                log.info(f"Dados do Pok√©mon {nome_pokemon} obtidos da API. Inserindo no banco de dados...")
                inserir_dados(conexao, cursor, dados_pokemon)

                atributos_traduzidos = traduzir_atributos(dados_pokemon['stats'])
                habilidades_traduzidas = traduzir_habilidades(dados_pokemon['abilities'])
                tipos_traduzidos = traduzir_tipos(dados_pokemon['types'])
                peso = dados_pokemon['weight'] / 10
                altura = dados_pokemon['height'] / 10

                mensagem_final = f"{EMOJIS_POKEMON.get(nome_pokemon, '')} {nome_pokemon.capitalize()} - Altura: {altura:.2f}m, Peso: {peso:.2f}kg | Atributos: {', '.join(atributos_traduzidos)} | Habilidades: {', '.join(habilidades_traduzidas)}, Tipos: {', '.join(tipos_traduzidos)}"
                alerta(mensagem_final, 'info')

            else:
                log.error(f"N√£o foi poss√≠vel encontrar o Pok√©mon {nome_pokemon} na API ou no banco de dados.")

    except Exception as e:
        log.error(f"Ocorreu um erro na execu√ß√£o da automa√ß√£o: {e}")

    finally:
        if conexao:
            conexao.close()

if __name__ == "__main__":
    main()
